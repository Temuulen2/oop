#include <iostream>     // –æ—Ä–æ–ª—Ç –≥–∞—Ä–∞–ª—Ç—ã–Ω “Ø–π–ª–¥–ª–∏–π–≥ —Ö–∏–π—Ö
#include <vector>       // vector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞—à–∏–≥–ª–∞—Ö
using namespace std;

// üë§ Person (–•“Ø–Ω) –∞–Ω–≥–∏

class Person {
protected:
    string name; // –Ω—ç—Ä
    string ssn;  // –ù–∏–π–≥–º–∏–π–Ω –¥–∞–∞—Ç–≥–∞–ª—ã–Ω –¥—É–≥–∞–∞—Ä
    int age;     // –Ω–∞—Å
public:
    // Constructor ‚Äì –∞–Ω—Ö–Ω—ã —É—Ç–≥—É—É–¥ –æ–Ω–æ–æ–Ω–æ
    Person(string name, string ssn, int age) : name(name), ssn(ssn), age(age) {}

    // virtual print —Ñ—É–Ω–∫—Ü ‚Äì —Ö—ç–≤–ª—ç–ª—Ç —Ö–∏–π—Ö –±–æ–ª–æ–º–∂—Ç–æ–π, override-–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω
    virtual void print() {
        cout << "Name: " << name << ", SSN: " << ssn << ", Age: " << age << endl;
    }
};


//  Spouse (–Ω”©—Ö”©—Ä/—ç—Ö–Ω—ç—Ä) –∞–Ω–≥–∏

class Spouse : public Person {
    string anniversaryDate; // –•—É—Ä–∏–º—ã–Ω –æ–π
public:
    Spouse(string name, string ssn, int age, string annivDate)
        : Person(name, ssn, age), anniversaryDate(annivDate) {}

    // Override —Ö–∏–π–∂ ”©”©—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –Ω—ç–º—ç–ª—Ç—ç—ç—Ä —Ö—ç–≤–ª—ç—Ö
    void print() override {
        cout << "  Spouse -> ";
        Person::print();
        cout << "    Anniversary Date: " << anniversaryDate << endl;
    }
};


//  Child (—Ö“Ø“Ø—Ö—ç–¥) –∞–Ω–≥–∏

class Child : public Person {
    string favoriteToy; // –î—É—Ä—Ç–∞–π —Ç–æ–≥–ª–æ–æ–º
public:
    Child(string name, string ssn, int age, string toy)
        : Person(name, ssn, age), favoriteToy(toy) {}

    void print() override {
        cout << "  Child -> ";
        Person::print();
        cout << "    Favorite Toy: " << favoriteToy << endl;
    }
};


//  Division (—Ö—ç–ª—Ç—ç—Å) –∞–Ω–≥–∏

class Division {
    string divisionName; // –•—ç–ª—Ç—Å–∏–π–Ω –Ω—ç—Ä
public:
    Division(string name) : divisionName(name) {}

    string getDivisionName() { return divisionName; }

    void print() {
        cout << "Division: " << divisionName << endl;
    }
};


//  JobDescription (–ê–∂–ª—ã–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç) –∞–Ω–≥–∏

class JobDescription {
    string description; // –ê–∂–ª—ã–Ω —Ç–∞–π–ª–±–∞—Ä
public:
    JobDescription(string desc) : description(desc) {}

    void print() {
        cout << "  Job: " << description << endl;
    }
};


//  Employee (–ê–∂–∏–ª—Ç–∞–Ω) –∞–Ω–≥–∏
class Employee : public Person {
    string companyID;  // –∫–æ–º–ø–∞–Ω–∏–π–Ω ID
    string title;      // –ê–ª–±–∞–Ω —Ç—É—à–∞–∞–ª
    string startDate;  // –ê–∂–∏–ª–¥ –æ—Ä—Å–æ–Ω –æ–≥–Ω–æ–æ
    Division* division;                        // –•—ç–ª—Ç—Å–∏–π–Ω –∑–∞–∞–ª—Ç (pointer)
    vector<JobDescription*> jobDescriptions;  // 1..n –ê–∂–ª—ã–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç
    Spouse* spouse;                            // 0..1 –ù”©—Ö”©—Ä/—ç—Ö–Ω—ç—Ä
    vector<Child*> children;                   // 0..n –•“Ø“Ø—Ö–¥“Ø“Ø–¥
public:
    // Constructor ‚Äì –±“Ø—Ö —É—Ç–≥—É—É–¥—ã–≥ –æ–Ω–æ–æ—Ö
    Employee(string name, string ssn, int age,
             string companyID, string title, string startDate,
             Division* div)
        : Person(name, ssn, age), companyID(companyID), title(title),
          startDate(startDate), division(div), spouse(nullptr) {}

    // –ê–∂–ª—ã–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç –Ω—ç–º—ç—Ö —Ñ—É–Ω–∫—Ü
    void addJobDescription(JobDescription* job) {
        jobDescriptions.push_back(job);
    }

    // –ù”©—Ö”©—Ä/—ç—Ö–Ω—ç—Ä –æ–Ω–æ–æ—Ö
    void setSpouse(Spouse* s) {
        spouse = s;
    }

    // –•“Ø“Ø—Ö—ç–¥ –Ω—ç–º—ç—Ö
    void addChild(Child* c) {
        children.push_back(c);
    }

    // –ú—ç–¥—ç—ç–ª—ç–ª —Ö—ç–≤–ª—ç—Ö override —Ö–∏–π—Å—ç–Ω —Ñ—É–Ω–∫—Ü
    void print() override {
        cout << "Employee Information:\n";
        Person::print(); // “Ø–Ω–¥—Å—ç–Ω –º—ç–¥—ç—ç–ª—ç–ª
        cout << "  CompanyID: " << companyID
             << ", Title: " << title
             << ", StartDate: " << startDate << endl;
        division->print(); // —Ö—ç–ª—Ç—ç—Å
        for (auto job : jobDescriptions)
            job->print(); // –∞–∂–ª—ã–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç –±“Ø—Ä–∏–π–≥ —Ö—ç–≤–ª—ç—Ö
        if (spouse != nullptr)
            spouse->print(); // –Ω”©—Ö”©—Ä/—ç—Ö–Ω—ç—Ä –±–∞–π–≤–∞–ª
        for (auto child : children)
            child->print(); // —Ö“Ø“Ø—Ö–¥“Ø“Ø–¥–∏–π–≥ —Ö—ç–≤–ª—ç—Ö
        cout << "--------------------------------------\n";
    }
};


//  main() —Ñ—É–Ω–∫—Ü ‚Äì –ì“Ø–π—Ü—ç—Ç–≥—ç–ª —ç—Ö—ç–ª–Ω—ç

int main() {
    // –•—ç–ª—Ç—Å“Ø“Ø–¥ “Ø“Ø—Å–≥—ç—Ö
    Division sales("Sales");           // –ë–æ—Ä–ª—É—É–ª–∞–ª—Ç
    Division hr("Human Resources");    // –•“Ø–Ω–∏–π –Ω”©”©—Ü

    // –ê–∂–ª—ã–Ω —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç—É—É–¥
    JobDescription dev("Developer");
    JobDescription manager("Manager");
    JobDescription analyst("Analyst");

    // 1-—Ä –∞–∂–∏–ª—Ç–∞–Ω Alice
    Employee emp1("Alice", "111-22-3333", 30, "E001", "Team Lead", "2020-01-15", &sales);
    emp1.addJobDescription(&dev);      // –•”©–≥–∂“Ø“Ø–ª—ç–≥—á
    emp1.addJobDescription(&manager);  // –ú–µ–Ω–µ–∂–µ—Ä
    emp1.setSpouse(new Spouse("Bob", "444-55-6666", 32, "2018-06-21")); // –ù”©—Ö”©—Ä
    emp1.addChild(new Child("Charlie", "123-45-6789", 5, "Lego"));     // –•“Ø“Ø—Ö—ç–¥ 1
    emp1.addChild(new Child("Daisy", "987-65-4321", 3, "Doll"));       // –•“Ø“Ø—Ö—ç–¥ 2

    // 2-—Ä –∞–∂–∏–ª—Ç–∞–Ω John
    Employee emp2("John", "777-88-9999", 28, "E002", "HR Specialist", "2021-05-01", &hr);
    emp2.addJobDescription(&analyst);  // –ê–Ω–∞–ª–∏—Å—Ç
    // John –Ω”©—Ö”©—Ä/—ç—Ö–Ω—ç—Ä –±–æ–ª–æ–Ω —Ö“Ø“Ø—Ö—ç–¥–≥“Ø–π

    // –ê–∂–∏–ª—Ç–Ω—É—É–¥—ã–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö—ç–≤–ª—ç—Ö
    emp1.print();
    emp2.print();

    return 0;
}
